{"version":3,"file":"static/js/982.5f00329b.chunk.js","mappings":"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","sources":["components/MoviesList/MovieList.styled.js","components/MoviesList/MoviesList.js","pages/Search/Search.styled.js","pages/Search/Search.js","services/Api/Api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  justify-content: center;\n  align-items: stretch;\n  grid-gap: 20px;\n`;\n// export const CardList = styled.li``;\n// export const Link = styled.li`\n//   text-decoration: none;\n// `;\n// justify-items: center;\nexport const Img = styled.img`\n  border-top-left-radius: 10px;\n  border-top-right-radius: 10px;\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n    0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n\n  &:hover,\n  &:focus {\n    box-shadow: 0px 7px 8px -5px rgba(0, 0, 0, 0.2),\n      0px 8px 9px 0px rgba(0, 0, 0, 0.14), 0px 5px 15px 0px rgba(0, 0, 0, 0.12);\n  }\n`;\nexport const Cover = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  link-decoration: none;\n  text-decoration: none;\n`;\nexport const Title = styled.h2`\n  padding: 10px;\n  font-size: 18px;\n  line-height: 1.56;\n  color: #182446f2;\n\n  text-align: center;\n  justify-content: center;\n  align-content: center;\n  vertical-align: middle;\n  width: 280px;\n  height: 50px;\n  background-color: rgb(170 161 140 / 24%);\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n    0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n  &:hover,\n  &:focus {\n    color: #ad3737;\n  }\n`;\n// word -break: break-all;\n// .projects__list {\n//   display: block;\n//   margin-top: 40px;\n\n//   @media screen and (min-width: 768px) {\n//     display: flex;\n//     flex-wrap: wrap;\n//     flex-basis: 50%;\n//     margin-top: 14px;\n//   }\n\n//   @media screen and (min-width: 1200px) {\n//     @include display-flex(center);\n//     margin-left: auto;\n//     margin-top: 34px;\n//   }\n// }\n\n// .projects__item {\n//   border: 1px solid var(--bg-border-cl);\n//   border-top: none;\n//   background-color: var(--main-white-cl);\n//   margin-bottom: 30px;\n//   &:last-child {\n//     margin-bottom: 0;\n//   }\n\n//   @media screen and (min-width: 768px) {\n//     width: calc((100% - 2 * 15px) / 2);\n//     &:nth-child(2n + 1) {\n//       margin-right: 30px;\n//     }\n//   }\n\n//   @media screen and (min-width: 1200px) {\n//     width: calc((100% - 2 * 30px) / 3);\n//     margin-right: 30px;\n\n//     &:last-child {\n//       margin-left: 0;\n//     }\n//     &:nth-child(3n) {\n//       margin-right: 0;\n//     }\n\n//     &:nth-last-child(-n + 3) {\n//       margin-bottom: 0;\n//     }\n//   }\n// }\n\n// .projects__icon-link {\n//   display: inline-block;\n//   transition: box-shadow var(--main-animation);\n\n//   &:hover {\n//     box-shadow: var(--main-bcg-shadow);\n//   }\n// }\n\n// .projects__holder {\n//   position: relative;\n//   overflow: hidden;\n// }\n\n// .projects__img {\n//   width: 450px;\n//   height: 294px;\n// }\n\n// .projects__action {\n//   display: flex;\n//   position: absolute;\n//   width: 100%;\n//   height: 100%;\n//   background-color: var(--action-bg-cl);\n//   border: 1px solid var(--accent-cl-dark);\n//   box-shadow: var(--accent-bcg-shadow);\n//   transform: translateY(100%);\n//   transition: transform var(--main-animation);\n\n//   .projects__icon-link:hover &,\n//   .projects__icon-link:focus & {\n//     transform: translateY(-100%);\n//   }\n// }\n\n// .projects__text {\n//   @include display-flex(center);\n//   margin: 63px 24px;\n//   font-style: normal;\n//   @include fonts(18px, 1.56);\n//   font-size: 18px;\n//   line-height: 1.56;\n//   color: var(--main-white-cl);\n// }\n\n// .projects__sign-group {\n//   padding: 20px 24px;\n// }\n\n// .projects__title {\n//   margin-bottom: 4px;\n//   @include fonts(18px, 2);\n//   font-size: 18px;\n//   line-height: 2;\n//   text-align: left;\n// }\n\n// .projects__label {\n//   color: var(--main-txt-cl);\n//   @include fonts(16px, 1.88);\n// }\n","import { Link } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\nimport noPoster from 'images/Posters/noPoster.jpeg';\nimport { Cover, List, Title, Img } from './MovieList.styled';\n\nexport const TrendingMoviesList = ({ trendingMovies }) => {\n  // setIsLoading(true);\n  const location = useLocation();\n\n  return (\n    <List>\n      {trendingMovies.map(({ id, poster_path, title, name }) => (\n        <li key={id}>\n          <Link to={`/movies/${id}`} state={{ from: location }}>\n            <Cover>\n              {poster_path ? (\n                <Img\n                  src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n                  alt={title}\n                  width=\"300\"\n                  height=\"400\"\n                />\n              ) : (\n                <img src={noPoster} alt={title} width=\"300\" height=\"400\" />\n              )}\n              <Title>{title || name}</Title>\n            </Cover>\n          </Link>\n        </li>\n      ))}\n    </List>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Cover = styled.div`\n   {\n    padding: 25px;\n  }\n`;\n// background - color: rgb(64 64 64 / 17 %);\n// padding-top: 30px;\n//     padding-bottom: 10px;\nexport const Form = styled.form`\n   {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin-bottom: 30px;\n  }\n`;\n\nexport const Input = styled.input`\n   {\n    width: 300px;\n    color: #fff;\n    font-size: 16px;\n    padding: 11px 17px; \n    border: none;\n    background-color: #8e6f6f; \n    @include transition(all 0.2s ease-in); \n    float: left; /* IE 9 Fix */\n    &:hover, &:focus { \n        background-color:#7e5a5a ;\n        outline: none; \n    }\n`;\n\nexport const Button = styled.button`\n   {\n    cursor: pointer;\n    display: inline-block;\n    color: #fff;\n    font-size: 16px;\n    text-transform: uppercase;\n    padding: 11px 20px;\n    border: none;\n    margin-left: -1px;\n    background-color: #c0392b;\n    float: left; /* IE 9 Fix */\n    @include transition(all 0.2s ease-in);\n    &:hover {\n      background-color: #6e0e0e;\n    }\n  }\n`;\n\nexport const TrendCover = styled.div`\n   {\n  }\n`;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n// import { toast } from 'react-toastify';\nimport { getMoviesByQuery } from 'services/Api/Api';\nimport { TrendingMoviesList } from 'components/MoviesList/MoviesList';\n\n// import { Box } from 'components/Box';\nimport { Form, Input, Button, Cover, TrendCover } from './Search.styled';\n\nconst Search = () => {\n  const [query, setQuery] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [moviesByQuery, setMoviesByQuery] = useState([]);\n\n  const onChangeInput = e => {\n    const { value } = e.currentTarget;\n    setQuery(value);\n  };\n\n  const onSubmitForm = e => {\n    e.preventDefault();\n    setSearchParams({ query });\n\n    if (query.trim() === '') {\n      alert(\"Please, enter some picture's name!\");\n\n      // toast.error(\"Please, enter some picture's name!\");\n    }\n  };\n  useEffect(() => {\n    const searchQuery = searchParams.get('query');\n    if (!searchQuery) {\n      return;\n    }\n    getMoviesByQuery(searchQuery).then(setMoviesByQuery);\n  }, [searchParams]);\n  return (\n    <Cover>\n      <Form onSubmit={onSubmitForm}>\n        <Input\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Input movie name\"\n          value={query}\n          onChange={onChangeInput}\n        />\n        <Button type=\"submit\">Search</Button>\n      </Form>\n      <TrendCover>\n        <TrendingMoviesList trendingMovies={moviesByQuery} />\n      </TrendCover>\n    </Cover>\n  );\n};\nexport default Search;\n","import axios from 'axios';\n\nconst API_KEY = 'api_key=31142dc0aeacf38ab901f6c28fe4e845';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingMovie = async () => {\n  const res = await axios.get(`${BASE_URL}/trending/movie/day?${API_KEY}`);\n  return res.data;\n  // console.log(res.data.results);\n};\n\nexport const getDetailsMovie = async id => {\n  const res = await axios.get(`${BASE_URL}/movie/${id}?${API_KEY}`);\n  return res.data;\n  // console.log(res.data.results);\n};\n\nexport const getMoviesByQuery = async query => {\n  const res = await axios.get(\n    `${BASE_URL}/search/movie?${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n  );\n  return res.data.results;\n};\n\nexport const getActors = async movieId => {\n  const res = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?${API_KEY}&language=en-US`\n  );\n  // console.log(res.data.cast);\n  return res.data.cast;\n};\n\nexport const getReviews = async movieId => {\n  const res = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?${API_KEY}&language=en-US&page=1`\n  );\n  return res.data.results;\n  // console.log(res.data.results);\n};\n\n// const genres = [\n//   {\n//     id: 28,\n//     name: 'Action',\n//   },\n//   {\n//     id: 12,\n//     name: 'Adventure',\n//   },\n//   {\n//     id: 16,\n//     name: 'Animation',\n//   },\n//   {\n//     id: 35,\n//     name: 'Comedy',\n//   },\n//   {\n//     id: 80,\n//     name: 'Crime',\n//   },\n//   {\n//     id: 99,\n//     name: 'Documentary',\n//   },\n//   {\n//     id: 18,\n//     name: 'Drama',\n//   },\n//   {\n//     id: 10751,\n//     name: 'Family',\n//   },\n//   {\n//     id: 14,\n//     name: 'Fantasy',\n//   },\n//   {\n//     id: 36,\n//     name: 'History',\n//   },\n//   {\n//     id: 27,\n//     name: 'Horror',\n//   },\n//   {\n//     id: 10402,\n//     name: 'Music',\n//   },\n//   {\n//     id: 9648,\n//     name: 'Mystery',\n//   },\n//   {\n//     id: 10749,\n//     name: 'Romance',\n//   },\n//   {\n//     id: 878,\n//     name: 'Science Fiction',\n//   },\n//   {\n//     id: 10770,\n//     name: 'TV Movie',\n//   },\n//   {\n//     id: 53,\n//     name: 'Thriller',\n//   },\n//   {\n//     id: 10752,\n//     name: 'War',\n//   },\n//   {\n//     id: 37,\n//     name: 'Western',\n//   },\n// ];\n\n// const main = document.getElementById('main');\n// const form = document.querySelector('.search__form');\n// const search = document.querySelector('.search__field');\n\n// const tagsEl = document.getElementById('tags');\n// let selectedGenre = [];\n// // setGenre();\n// // genresBtn.addEventListener('click', setGenre);\n\n// //*pagination parameters\n// // const prev = document.getElementById('prev')\n// // const next = document.getElementById('next')\n// // const current = document.getElementById('current')\n\n// // let  currentPage = 1;\n// // let  nextPage = 2;\n// // let  prevPage = 3;\n// // let  lastUrl = '';\n// // let  totalPages = 100;\n\n// function setGenre() {\n//   tagsEl.innerHTML = '';\n//   genres.forEach(genre => {\n//     //Для каждого жанра делаем div с классом 'tag'\n//     //Записываем туда имя жанра\n//     const t = document.createElement('div');\n//     t.classList.add('tag');\n//     t.id = genre.id;\n//     t.innerText = genre.name;\n//     tagsEl.append(t);\n//     // console.log(tagsEl);\n\n//     //по клику проверяем\n//     t.addEventListener('click', () => {\n//       //если выбранная картинка не имеет жанра,\n//       main.classList.add('sorted-main-container');\n//       if (selectedGenre.length == 0) {\n//         selectedGenre.push(genre.id);\n//       } else {\n//         //если выбранная картинка содержит жанр,\n//         // и что бы она не повторялась в списке\n\n//         if (selectedGenre.includes(genre.id)) {\n//           selectedGenre.forEach((id, idx) => {\n//             if (id == genre.id) {\n//               selectedGenre.splice(idx, 1);\n//             }\n//           });\n//         } else {\n//           //мы его туда добавляем\n//           selectedGenre.push(genre.id);\n//         }\n//       }\n//       // console.log(selectedGenre);\n//       getMovies(API_URL + '&with_genres=' + encodeURI(selectedGenre.join(',')));\n//       highlightSelection();\n//     });\n//     tagsEl.append(t);\n//   });\n// }\n\n// //функция которая сбрасывает все жанры одной кнопкой\n\n// function clearBtn() {\n//   //что-бы наша кнопка clear не дублировалась\n//   let clearBtn = document.getElementById('clear');\n//   if (clearBtn) {\n//     clearBtn.classList.add('highlight');\n//   } else {\n//     //формируем кнопку Clear\n//     let clear = document.createElement('div');\n//     clear.classList.add('tag', 'highlight', 'clear-btn');\n//     clear.id = 'clear';\n//     clear.innerText = 'Clear All';\n//     clear.addEventListener('click', () => {\n//       selectedGenre = [];\n//       setGenre();\n//       getMovies(API_URL);\n//     });\n//     tagsEl.append(clear);\n//   }\n// }\n\n// // renderMarkupMovieCard(API_URL);\n// // getMovies(API_URL);\n\n// function getMovies(url) {\n//   //получаем фильмы по URL из библиотеки\n\n//   // lastUrl = url;\n\n//   fetch(url)\n//     .then(res => res.json())\n//     .then(data => {\n//       // console.log(data.results)\n//       if (data.results.length !== 0) {\n//         showMovies(data.results);\n//         currentPage = data.page;\n//         nextPage = currentPage + 1;\n//         prevPage = currentPage - 1;\n//         totalPages = data.total_pages;\n\n//         // current.innerText = currentPage;\n\n//         // if(currentPage <= 1){\n//         //   prev.classList.add('disabled');\n//         //   next.classList.remove('disabled')\n//         // }else if(currentPage>= totalPages){\n//         //   prev.classList.remove('disabled');\n//         //   next.classList.add('disabled')\n//         // }else{\n//         //   prev.classList.remove('disabled');\n//         //   next.classList.remove('disabled')\n//         // }\n\n//         tagsEl.scrollIntoView({ behavior: 'smooth' });\n//       } else {\n//         main.innerHTML = `<div class=\"container library-container noMovies\"><h1 class=\"title-queue\">There are no movies, try other genres</h1></div>`;\n//       }\n//     });\n// }\n\n// function showMovies(data) {\n//   main.innerHTML = '';\n\n//   data.forEach(movie => {\n//     //создаем раскладку с картинками\n//     const {\n//       title,\n//       poster_path,\n//       vote_average,\n//       release_date,\n//       overview,\n//       id,\n//       genre_ids,\n//     } = movie;\n//     // { id, poster_path, genre_ids, title, release_date, vote_average }\n//     const movieEl = document.createElement('div');\n//     movieEl.classList.add('movie');\n\n//     //template for each picture\n//     movieEl.innerHTML = `\n\n//     <li>\n\n//       <div class=\"movie-card\" id=\"${id}\">\n//       <div class=\"movie-card__poster-container\"> ${\n//         poster_path\n//            `<img src=\"https://image.tmdb.org/t/p/w300${poster_path}\"`\n//           : `<img src=\"https://yt3.ggpht.com/AAKF_677TIvjFz_9xFF0R6PgiVd0kRpEtY6APSxSDRP65nXg8hkn9NFsz2bRd9_Z37DJ9D_b=s900-c-k-c0x00ffffff-no-rj\"`\n//       }\n//               class=\"movie-card__poster\"\n//               alt=\"${title}\"\n//               loading=\"lazy\"\n//           /></div>\n\n//           <div class=\"movie-info\">\n\n//              <h2 class=\"movie-info-title\"> ${title}</h2>\n//               <span class=\" movie-info-rating ${getColor(\n//                 vote_average\n//               )}\">${vote_average}</span>\n//           </div>\n\n//     </div>\n// </li>\n\n//       `;\n\n//     main.appendChild(movieEl);\n\n//     document.getElementById(id).addEventListener('click', () => {\n//       console.log(id);\n//       openNav(movie);\n//     });\n//   });\n// }\n\n// function getColor(vote) {\n//   if (vote >= 8) {\n//     return 'green';\n//   } else if (vote >= 5) {\n//     return 'orange';\n//   } else {\n//     return 'red';\n//   }\n// }\n\n// form.addEventListener('submit', e => {\n//   e.preventDefault();\n\n//   const searchTerm = search.value;\n//   selectedGenre = [];\n//   setGenre();\n//   if (searchTerm) {\n//     getMovies(searchURL + '&query=' + searchTerm);\n//   } else {\n//     getMovies(API_URL);\n//   }\n// });\n\n// //функция, которая задает цвета для наших фильтров\n\n// function highlightSelection() {\n//   const tags = document.querySelectorAll('.tag');\n//   tags.forEach(tag => {\n//     tag.classList.remove('highlight');\n//   });\n//   clearBtn();\n//   //проверяем есть ли в жанрах что-то\n//   if (selectedGenre.length != 0) {\n//     selectedGenre.forEach(id => {\n//       const hightlightedTag = document.getElementById(id);\n//       hightlightedTag.classList.add('highlight');\n//     });\n//   }\n// }\n\n// const genresBtn = document.querySelector('.dropdown-genres-btn');\n// // const genresList = document.querySelector('.dropdown-content');\n// genresBtn.addEventListener('click', myFunction);\n\n// function myFunction() {\n//   document.getElementById('tags').classList.toggle('show');\n// }\n// document.onclick = function (event) {\n//   if (!event.target.matches('.dropdown-toggle')) {\n//     const dropdowns = document.getElementsByClassName('dropdown-menu');\n//     let i = 0;\n//     for (i = 0; i < dropdowns.length; i++) {\n//       const openDropdown = dropdowns[i];\n//       if (openDropdown.classList.contains('show')) {\n//         openDropdown.classList.remove('show');\n//       }\n//     }\n//   }\n// };\n\n// //*pagination\n\n// // prev.addEventListener('click', () => {\n// //   if(prevPage > 0){\n// //     pageCall(prevPage);\n// //   }\n// // })\n\n// // next.addEventListener('click', () => {\n// //   if(nextPage <= totalPages){\n// //     pageCall(nextPage);\n// //   }\n// // })\n\n// // function pageCall(page){\n// //   let urlSplit = lastUrl.split('?');\n// //   let queryParams = urlSplit[1].split('&');\n// //   let key = queryParams[queryParams.length -1].split('=');\n\n// // if(key[0] != 'page'){\n// //     let url = lastUrl + '&page='+page\n// //     fetchPopularMovies(url);\n// //   }else{\n// //     key[1] = page.toString();\n// //     let a = key.join('=');\n// //     queryParams[queryParams.length -1] = a;\n// //     let b = queryParams.join('&');\n// //     let url = urlSplit[0] +'?'+ b\n// //     fetchPopularMovies(url);\n// //   }\n// // }\n"],"names":["List","styled","Img","Cover","Title","TrendingMoviesList","trendingMovies","location","useLocation","map","id","poster_path","title","name","to","state","from","src","alt","width","height","noPoster","Form","Input","Button","TrendCover","useState","query","setQuery","useSearchParams","searchParams","setSearchParams","moviesByQuery","setMoviesByQuery","useEffect","searchQuery","get","getMoviesByQuery","then","onSubmit","e","preventDefault","trim","alert","type","autoComplete","autoFocus","placeholder","value","onChange","currentTarget","API_KEY","BASE_URL","getTrendingMovie","axios","res","data","getDetailsMovie","results","getActors","movieId","cast","getReviews"],"sourceRoot":""}